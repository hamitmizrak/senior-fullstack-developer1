# docker-compose --version
# docker-compose -v
# docker-compose up
# docker-compose up -d
# docker-compose -f Custom_Docker_compose.yml up
# docker-compose -f Custom_Docker_compose.yml up -d
# docker-compose down
# docker-compose restart
# docker-compose ps

# restart: on-failure
# restart: no => default olandır. Yani docker compose otomatik olarak restart yapsın
# restart: unless-stopped => Konteynar durduğunda otomatik olarak yeniden başlasın
# restart: always => Konteynar her zaman otomatik başlasın
# restart: on-failure => konteryanar çökmesi halinde otomatik başlasın


#######################################################################################################################
#######################################################################################################################

# Docker compose dosyasının sürüm numarasını gösterir
version: '3.1'


# Services: Docker Compose ile çalışacak hizmetleri tanımlar
services:

# nodejs Service
  nodejs:
    build: .
    #build:
      #context: .
      #dockerfile: NodeDockerfile
    ports:
      - "2222:1111"
    networks:
      - app-network
    depends_on:
      - mongo

# Mongo Service    
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - app-network


# nginx Service
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx_data/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx_data/nginx/nginx.conf:/etc/nginx/nginx.conf
      #- ./nginx_data/html:/usr/share/nginx/html
      - ./views:/usr/share/nginx/html
    networks:
      - app-network
    depends_on:
      - nodejs


# Networks
networks:
  app-network:
    name: app-network
    driver: bridge

#######################################################################################################################
#######################################################################################################################
# docker ps
# winpty docker container  exec -it  blog_react bash

# docker-compose down
# docker volume ls
# docker volume inspect mysql_volume_data

# docker-compose down
# docker volume rm mysql_volume_data

# winpty docker run -it --rm \
# -v docker_apache_tomcat-conf://usr/local/tomcat/conf  \
# -v docker_apache_tomcat-logs://usr/local/tomcat/logs \
# -v docker_apache_tomcat-webapps://usr/local/tomcat/webapps \
# blog_react bash

# ls -al
# cd usr/local/tomcat/logs
# ls -al
# cd usr/local/tomcat/webapps
# Bu komut şunları yapar:

# docker run: Yeni bir container çalıştırır.
# -it: İnteraktif terminal modunda çalıştırır.
# --rm: Container kapatıldığında otomatik olarak siler.
# -v tomcat-logs:/data: tomcat-logs volume'unu container içindeki /data dizinine bağlar.
# ubuntu: Ubuntu tabanlı bir container çalıştırır.
# bash: Container içinde bash shell çalıştırır.

# deploy kısmında, Swarm dağıtımı için ayarları yapıyoruz.
# 3 kopya (replicas: 3) oluşturulacak, güncelleme yapılandırması
# ve yeniden başlatma politikası belirlenmiştir.
